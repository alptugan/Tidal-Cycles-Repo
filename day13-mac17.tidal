-- atrip1 test

-- set tempo 120 bpm
bps(120/120);

import Sound.Tidal.Time
import Sound.Tidal.Utils
import Data.Maybe

-- play different sound 
d1 $ every 4 (const $ sound "dr_few") $ sound "co:3"

<<<<<<< Updated upstream
-- new song.1 - aggressive 
d1 $ every 8 (jux(rev).(every 2 (striate (100 + irand 64)))) $ sound "auto:3 ~ [auto:3 auto:3] ~"
d2 $ sound "auto:6*8"
d3 $ every 8 (degradeBy 2) $ every 2 (#gain "0") $ sound "auto:8*30" # gain "0.9"
d4 $ sound "bit1*8?" # n (irand 55) # gain "0.9"
d5 $ sound "jungbass:5/8" # gain "1.1"
=======
d1 $ stack [
  --slow 10 $ striate 128 $ s "atrip1:0" # gain "0",
  slow 20 $ striate 64 $ s "atrip1:11" # gain "1",-- [drum] --
  slow 10 $ striate 32 $ s "atrip1:2" # gain "1", -- [piano] -- slow  5 and 10 -- degradeBy 0.5
  --slow 10 $ striate 32 $ s "atrip1:1" # gain "1.2" -- [bass] --
  --slow 10 $ striate 32 $ s "atrip1:5" # gain "1",  -- [synth] --
  slow 20 $ striate 32 $ s "atrip1:6" # gain "0"  -- [synth] --shuffle 4 $ jux(rev) $
]

d1 $ stack [
  --slow 10 $ striate 128 $ s "atrip1:0" # gain "0",
  slow 20 $ striate 64 $ s "atrip1:11" # gain "1",-- [drum] --
  slow 10 $ striate 32 $ s "atrip1:2" # gain "1", -- [piano] -- slow  5 and 10 -- degradeBy 0.5
  --slow 10 $ striate 32 $ s "atrip1:1" # gain "1.2" -- [bass] --
  --slow 10 $ striate 32 $ s "atrip1:5" # gain "1",  -- [synth] --
  slow 20 $ striate 32 $ s "atrip1:6" # gain "0",  -- [synth] --shuffle 4 $ jux(rev) $
  degradeBy 0.5 $ sound "bleep*4" # n (irand 12) # gain "0.7"
]

d1 $ every 8 (jux(rev).(every 2 (striate (100 + irand 64)))).(every 2 (iter 4)) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1.1"
d2 $ sound "auto:6*8"
d3 $ every 8 (degradeBy 2) $ every 2 (#gain "0") $ sound "auto:8*30" # gain "1"
d4 $ sound "bit1*8?" # n (irand 55) # gain "1" # pan "[0 1]"
d5 $ sound "jungbass:5/8" # gain "1.2"

d1 silence
d3 silence
d4 silence

d1 $ every 4 (const $ sound "dr_few") $ sound "co:3"

d1 $ sound "atrip1:0"
cps (1)

d1 $ seqP [
  (0, 12, sound "dr_few:3 dr_few:3*2"),
  (4, 12, sound "dr*2 [cc dr:11] dr:11 future*4"),
  (8, 12, sound (samples "arp*8" (run 16)))
]

cps(1)

d1 $ (pure now) ~> seqPLoop [
  (0, 12, sound "dr_few:3 dr_few:3*2"),
  (4, 12, sound "dr*2 [cc dr:11] dr:11 future*4"),
  (8, 12, sound (samples "chin*8" (run 4)))
]

d1 $ (pure now) ~> seqP [
(0, 12, sound "dr_few:3 dr_few:3*2"),
(4, 12, sound "dr*2 [cc dr:11] dr:11 future*4"),
(8, 12, sound (samples "chin*8" (run 4)))
]
>>>>>>> Stashed changes
