-- AGGRESSIVE
cps(1.1)

d1 $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"
d1 $ every 8 (jux(rev).(every 2 (striate (irand 128)))).(every 2 (iter 4)) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"

d1 $ every 8 ((const $ s "dr_few:1 dr_few:1*2 dr_few:1 dr_few:1*8" # gain 1).jux(rev).(every 2 (striate (irand 128)))).(every 2 (iter 4)) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"

d1 $ every 8 ((const $ every 16 ((jux(rev)).(#gain 0.9).(iter 4)) $ s "dr_few:3 dr_few:1*2 bit1:1 dr_few:1*8" # gain 1).jux(rev).(every 2 (striate (irand 128)))).(every 2 (iter 4)) $ sound "auto:3 ~ [auto:3 auto:2] ~" # gain "0"

d2 $ every 8 (every 2 (striate (irand 256))) $ sound "auto:6*8" # gain 0
d3 $ every 2 (#gain "0") $ sound "auto:8*30" # gain "0"
d4 $ every 16 ((loopAt "0.1").(# pan "[0 1]")) $ sound "bit1*8?" # n (irand 55) # pan "[0 1]" # gain 0
d5 $ every 4 (jux(rev)) $ sound "jungbass:5/8" # gain "0"



cps(-1)
cps(1.1)

d1 $ spaceOut ([1,0.97..0.4]) $ s "auto:3*4" # gain "1"

d2 $ seqP [
    (0, 8, sound "auto:6*8" # gain 1),
    (0, 8, every 2 (#gain "0") $ sound "auto:8*30" # gain "0.9"),
    (8, 9, sound "jungbass:5" # gain "1")
] # gain 0
d2 silence 



d1 $ seqP [
    (0, 20, every 8 ((const $ s "dr_few:1 dr_few:1*2 dr_few:1 dr_few:1*8" # gain 1).jux(rev).(every 2 (striate (irand 128)))).(every 2 (iter 4)) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    -- Set 4
    (20,40, every 2 (2 ~>).(every 3 (jux(rev))) $ every 2 (striate (irand 256)) $ s "bit1:4*8 bit1:4 dr_few:1*2 bit1:1 dr_few:1*8?" # gain 1 )
]


(0, 1, sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (1, 16, every 4 (0.25 ~>) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (16, 17, sound "auto:8*30" # gain "1" ),
    (17, 24, every 2 (#gain "0") $ sound "auto:8*30" # gain "1" ),
    (16, 23, sound "auto:6*8" # gain 1),
    (23, 24, every 8 (striate (irand 256)) $ sound "auto:6*8" # gain 1)



cps(-1)
cps(1.1)

d1 $ every 8 (# gain "0") $ every 16 ((loopAt "0.1").(# pan "[0 1]")) $ sound "bit1*8" # n (irand 55) # pan "[0 1]" # gain 0.9 # cut "1.1"

let p1 = 0
let p2 = 2 --17
let p3 = 3--18

d1 $ fast 8 $ spaceOut ([1,0.97..0.0]) $ s "auto:3*4" # gain "1"
d1 $ every 4 (jux(rev).(stut 4 0.1 (-0.5))) $ every 8 ((striate' (irand 64) (1/4)).(# speed (0.3 + (rand)))) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"

d1 $ fast 12 $ spaceOut ([1,0.99..0.0]) $ s "auto:3*8" # gain "0.65"
d1 $ every 4 (stut 4 0.1 (-0.5)) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"

d1 $ seqP [
    (0, 7, s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (7, 16, every 4 (jux(rev).(0.25 ~>).(stut 4 0.1 (-0.5))) $ every 8 ((striate' (irand 64) (1/4)).(# speed ((rand)))) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (0, 16, sound "auto:6*8" # gain "1"),
    (0, 1, sound "auto:8*30" # gain "1" ),
    (1, 16, every 2 (#gain "0") $ sound "auto:8*30" # gain "1"),
    (15, 16, sound "jungbass:5" # gain "1")
]

cps(-1)
cps(1.1)


d1 $ seqP [
    (0, 2, fast 8 $ spaceOut ([1,0.98..0.0]) $ s "auto:3*12" # gain "0.6" # sustain "1"),
    (2, 3, ((striate' (irand 64) (1/2)).(# speed (-0.08)).(# pan "[0 1]")) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (2, 3, sound "jungbass:5" # gain "1" # sustain "2"),
    (5, 7, fast 9 $ spaceOut ([1,0.98..0.0]) $ s "auto:3*12" # gain "0.6" # sustain "1"),
    (7, 8, ((striate' (irand 50) (1/2)).(# speed (-0.08)).(# pan "[0 1]")) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (7, 8, sound "jungbass:5" # gain "1"),
    (10, 12, fast 10 $ spaceOut ([1,0.98..0.0]) $ s "auto:3*12" # gain "0.6" # sustain "1"),
    (12, 13, ((striate' (irand 22) (1/2)).(# speed (-0.08)).(# pan "[0 1]")) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (12, 13, sound "jungbass:5" # gain "1"),
    (15, 19, fast 12 $ spaceOut ([1,0.99..0.0]) $ s "auto:3*12" # gain "0.65"),
    --(22, 23, ((striate' (irand 32) (1/2)).(# speed (-0.5)).(# pan "[0 1]")) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    --(22, 23, sound "jungbass:5" # gain "1"),
    -- Part 2
    (15, 31, sound "auto:6*8" # gain "1"),
    (16, 23, s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (23, 31, every 4 (jux(rev).(0.25 ~>)) $ every 8 ((striate' (irand 64) (1/4)).(# speed ((rand)))) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (16, 17, sound "auto:8*30" # gain "1" ),
    (17, 31, every 2 (#gain "0") $ sound "auto:8*30" # gain "1"),
    (31, 32, sound "jungbass:5" # gain "1"),
    -- Part 3
    (32, 39, s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (32, 48, sound "auto:6*8" # gain "1"),
    (39, 48, every 4 (jux(rev).(0.25 ~>).(stut 4 0.1 (-0.5))) $ every 8 ((striate' (irand 64) (1/4)).(# speed ((rand)))) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    (32, 33, sound "auto:8*30" # gain "1" ),
    (33, 48, every 2 (#gain "0") $ sound "auto:8*30" # gain "1"),
    (47, 48, sound "jungbass:5" # gain "1"),
    -- Part 3
    --(18, 25, sound "auto:6*8" # gain "1"),
    --(18, 19, sound "auto:8*30" # gain "1" ),
    --(19, 34, every 2 (#gain "0") $ sound "auto:8*30" # gain "1"),
    --(18, 25, s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    --(25, 34, every 8 ((striate' (irand 128) (1/2)).(# speed ((rand)-0.5)).(# pan "[0 1]")) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    --(25, 34, every 8 (striate (irand 256).(# pan "[0 1]")) $ sound "auto:6*8" # gain 1),
    --(34, 35, every 8 (# gain "1") $ sound "jungbass:5" # gain "0"),
    -- Part 4
    --(35, 42, sound "auto:6*8" # gain "1"),
    --(35, 36, sound "auto:8*30" # gain "1" ),
    --(36, 51, every 2 (#gain "0") $ sound "auto:8*30" # gain "1"),
    --(35, 42, s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    --(42, 51, every 8 ((striate' (irand 128) (1/2)).(# speed ((rand)-0.5)).(# pan "[0 1]")) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"),
    --(42, 51, every 8 (striate (irand 256).(# pan "[0 1]")) $ sound "auto:6*8" # gain 1),
    --(51, 52, every 8 (# gain "1") $ sound "jungbass:5" # gain "0"),
    -- Part 5
    (51, 69, every 2 (2 ~>).(every 3 (jux(rev))) $ every 2 (striate' (irand 256) (1/4)) $ s "bit1:4*8 bit1:4 dr_few:1*2 bit1:1 dr_few:1*8?" # gain "0.8" ),
    --(44, 84, every 2 (#gain "0") $ sound "auto:8*30" # gain "1"),
    --(64, 84, every 8 (# gain "0") $ every 16 ((loopAt "0.1").(# pan "[0 1]")) $ sound "bit1*16?" # n (irand 55) # pan "[0 1]" # gain 1.1  # cut "1.1"),
    -- Set 4
    (84,104, every 2 (2 ~>).(every 3 (jux(rev))) $ every 2 (striate (irand 256)) $ s "bit1:4*8 bit1:4 dr_few:1*2 bit1:1 dr_few:1*8?" # gain 1 ),
    (104, 164, every 8 ((const $ every 16 ((jux(rev)).(#gain 0.9).(iter 4)) $ s "dr_few:1 dr_few:1*2 bit1:1 dr_few:1*8" # gain 1).jux(rev).(every 2 (striate (irand 128)))).(every 2 (iter 4)) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1")
] 

d1 $ every 4 ((striate' (irand 128) (1/2)).(# speed ((rand)-0.5)).(# pan "[0 1]").(# gain 0.8)) $ s "auto:3 ~ [auto:3 auto:3] ~" # gain "1"

-- MEGADETH ŞARKI AÇILIŞ
d1 $ every 2 ((0.25 ~>).(every 4 (jux(rev))).(chop 3)) $ every 8 ((striate' (irand 128) (1/2)).(# gain 0.8)) $ s "bit1:4*8 dr_few:1*2 bit1:6 auto:5*4?" # gain 1 
cps 1
let r = [0.1,-2,0.3,4,30]

-- Kendi başına şarkı oldu AQ
d2 $ every 4 (jux(rev)).(jux(brak)) $ every 2 (striate (irand 256)) $ s "bit1:4*8 bit1:4 dr_few:1*2 bit1:1 dr_few:1*8?" # gain 1 # speed "[0.1 -2 0.3 4 30]" # lpf (scale 0 3000 $ sine)

cps 1.1
d1 $ every 4 (0.25 ~>) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"
d2 $ sound "auto:6*8" # gain 1

d1 $ every 8 (0.25 ~>) $ every 8 ((jux(rev)).(every 2 (iter 4))) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"
d2 $ every 8 (every 2 (striate (irand 256))) $ sound "auto:6*8" # gain 1

d1  $ every 8 (jux(rev).(every 2 (striate (irand 128)))).(every 2 (iter 4)) $ sound "auto:3 ~ [auto:3 auto:3] ~" # gain "1"

-- APHEX TWIN
cps (145/120) 


d2 $ slow 1 $ every 16 (iter 4) $ every 4 (jux(rev)) $ s "mlkick:1*2 mlkick mlkick ~ mlkick:3" # gain 1


d1
$ whenmod 3 16 (jux(rev))
    $ every 32 (jux(rev))
    $ whenmod 3 8 (jux(striate 64))
    $ cat [
        ---every 16 (shuffle 4) $ s "akuma1*4" # n (irand 12) # gain 1,
    every 6 (striate 64).jux(rev) $ s "mlglitch3*2?  mlglitch5*2?" # n (irand 22) # pan "[0 1]",
   -- every 6 (striate 32) $ every 4 (shuffle 4) $ s "akuma1*4" # n (irand 12) # gain 1,
    every 4 (striate 128) $ s "mlglitch3*8" # n (irand 22)
    -- s "akuma1*8?" # n (irand 12) # gain 1
    ] --- nudge "[0 0.04 2 0.1 0.05]*4"


let glitchIntro = cat [every 6 (striate 64).jux(rev) $ s "mlglitch3*8" # n (irand 22) # pan "[0 1]",every 4 (striate 128) $ s "mlglitch3*8" # n (irand 22)]

cps(-1)
cps (145/120) 

d1 $ seqP [
(0,4,glitchIntro),
-- (0, 12, sound "dr_few:3 dr_few:3*2"),
-- (4, 12, sound "glitch2"),
(8, 12, sound (samples "dr_few:3*8" (run 16)))
]

cps 1
--- 

d1 -- $ every 4 (iter 4) $ e 8 8 
$ stack [
  --sound (samples "bass1:0*4" (run 10)) # gain 1 # cut "0.3 0.5",
  every 4 (const $ s "ifdrums:10*4 ~ ifdrums:10*2 ifdrums:3" # gain 0.95) $ sound "ifdrums:10" # gain "1",
  slowcat [
  sound (samples "ul*8?" (irand 50)) # accelerate "-1" # sustain "0.05" # speed 100 # pan "[0 0 1 1 0.5 0.4 0.2 0.8 0 0 1 1]",
  sound (samples "glitch*8" (every 2 (density 1.2) $ density 1.21 $ run 150)) # pan "[0 1]",
  sometimesBy 0.9 ((# sustain "10").(# pan "0.5")) $ sound (samples "print*4?" (irand 13)) # pan "[0 1]" # gain "0.85" # sustain "0.1" # speed (rand*7)
  ] |+| unit "c" |+| speed "2"
]

d2 $ every 8 (# gain 0) $ every 8 (striate 32) $ sound "hh27*8" # n (irand 12) # gain "0.9"
d3 $ s "hoover" # n (2 1) # speed "1" 
d3 $ slow 4 $ s "dork2" # speed "-0.5"
