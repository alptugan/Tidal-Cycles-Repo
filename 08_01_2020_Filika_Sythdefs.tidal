d1 $ s "adrum2*8" # n (irand 32)

d1 $ midinote "62*4" # s "tutorial1" # sustain "0.1" # pan "[0.5 1]"

d1 $ midinote "62*4" # s "beating"
d1 $ s "beating" # n "[a5 g6 c5]/3"


d1 $ (1 ~>) $ s "string*6" # n "[a5 g6 c5 a5 g6 c5]" # gain "0.9" -- # freq "100"
d1 $ (1 ~>) $ s "spectral-delay*6" # n "[a5 g6 c5 a5 g6 c5]" # gain "0.9" 
-- d1  $ s "in"  # gain "0.9" 


// add your own parameter)
// we'll make a new "f" parameter instead of "n"
// to do this, we first need to this in Tidal: let (f, f_p) = pF "f" (Just 440)
// then "f" is usable as an argument to the synthdef, and in Tidal you can try

import Sound.Tidal.Context hiding (at)

let (f, f_p) = pF "f"
(at,at_p) = pF "at"



 d1 $ s "tutorial5/2" # f"[550,555]"

d1 $ sound "[adrum2:1 adrum2:4 adrum2:6*3]/2 [badrum2d adrum2:6*3 adrum2:9*4]/3"
bpm 120
d1 $ s "akuma1*8" # n (1 + (irand 6))
d1 $ every 3 (#n (irand 1)) $ s "akuma1*8" # n (1 + (irand 6))
d1 $ every 3 ((#n (irand 1)).(#speed 0.5).(striate 3)) $ s "akuma1*8" # n (1 + (irand 6))

d1 $ every 2 (|* speed "<0.5 2>") $ sound "<aset1*16 dr_few*8>" # speed "3" # n (irand 89)
koko 3 "<aambience/4 [bass click*4]>"
xfadeOut 1 5



d1 $ n "0 6 5 0" # sound "bd auto bd auto"

-- Basic function foo
let foo x y = x*x + y*y
print (foo 2 8)

-- Lists
x = [1,2,3]
y = [1,3..50]
z = 5:12:[]
s = ["one", "two", "three"]

-- In Haskell strings are lists of characters
stringA = "Lorem ipsum"++" is a string, which is a list of chars"
stirngB = " is a big pile of..."

print x
print y
print z
print s
print stringA

-- Tuples
x = (2, "two")
print x


-- Paranthesis
-- f :: Num a => a -> a
f x = x+2
g x = x*2
h x = x-10

print ((f . g) 10)
print ((g . f) 10)
print (f $ g $ h 10)
print (f . g $ h 10)
--print (f g $ h 10)
--print (f $ g h 10)

-- absolete
absolute x = if x >= 0 then x else -x

absolute' x
    | x >= 0 = x
    | otherwise = -x
    
print (absolute(-20))
print (absolute' (-10))


-- Recursion
--f :: Num a => a -> a
f x =
    if x == 1
        then x
        else x * f (x-1)

--sum :: Num a => a -> a
s x =
    if x == 1
        then x
        else x + s (x-1)

print "--- Haskell Recursion ---"
print (f 4)
print (s 255)

