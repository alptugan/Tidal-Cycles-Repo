bpm 120
setcps 1

d1 $ s "8469" # n 1 # begin (choose [0.7]) # end (choose [0.77, 1.0]) # cut "1" # gain "1.1"
d2 $ fast 2 $ s "8469" # n 1 # begin "<0.67 0.65 0.66 0.68 0.695 0.3>" # end (choose [0.77, 1.0]) # cut "2" # gain "1.2"

d1 $ s "8469" # n 0 # begin "<0.7 0.1 0.3 0.7 0.89>" # end "<0.72 0.12 0.32 0.71 0.9>" # gain "1.1" # cut "2"


d3 $ stack [
  s "t808:0(4,16)" # n (irand 19) # gain "1.3" # cut "3"
  ,every 4 (slow 4) $ sound "procshort" # n "<3 8>" # gain "0.8"
  --,slow 2 $ every 8 ((slow 1).(#n (cycleChoose [22..23])).(#room "0.4").(#gain "0.85").(# pan (range "0" "1" $ rand))) $ s "{glitch(16,18),tt_fx}" # gain (choose [0.8, 0.5, 0.84, 0, 0]) # n (cycleChoose [0..22])
  --,s "8469" # n 0 # begin "<0.4 0.4 0.4 0.1 0.5 0.9>" # end "<0.4 1.0>" # gain "1.4" # cut "1" -- # speed "0.2"
]

setcps 0.4

do

d1 $ s "bd*4" # n "0 0 0 3"
once $ sound "8469:1" # gain "1"
d2 $ repeatCycles 4 $ sound "<procshort([16 8]/3,16)>" # n (irand 18) # gain "<1 1>"

d1 $ slow 32 $ s "8469" # n 1 # begin (choose [0.04]) # end (choose [0.2]) # cut "1" # gain "1.1"

let garr = [2, 5, 6, 7]
d2 $ every 2 ((#n (choose garr)).(#speed (rand)).(#gain 1)) $ s "glitch" # n 2 # gain "0"


d2 $ every 4 (#n pat6) $ s "glitch*8" # n pat4 # gain (slow 2 "1.1 0.8")
xfadeOut 1 20

4,5
d1 $ s "tt_fx:4" # speed (slow 4 $ range "0.2" "1" $ sine)

d2 $  every 8 ((fast 2).(#n (cycleChoose [22..60])).(#room "0.4").(#gain "0.9").(# pan (range "0" "1" $ rand))) $ s "{glitch(4,4)}" # gain (choose [0.97, 0, 0.99, 0, 0.7]) # n (cycleChoose [0..22])

xfadeOut 2 10
setcps 0.5

d3 $ slow 2 
$ every 8 ((slow 3).(#n (cycleChoose [17..19])).(# s "{speechdark}").(#gain "0.8").(# pan (range "0" "1" $ rand))) 
$ sometimesBy 0.25 ((jux(rev)).(#speed (range "4.0" "0.1" $ slow 2 $ sine)). (#cut "1").(#room 0.3)) 
$ repeatCycles 8 $ sound "<procshort(16,32)>" # n (irand 18) # gain "<1 0.8>"

let tarr = [17,19]
d3 $ s "tt_fx" # n (choose tarr) # gain "0"

d1 $ zoom (0.6, 0.75) $ sound "8469:1"
d1 $ slow 64 $ striate 64 $ sound "8469:1" # gain "1.4" -- # cut "1" 
d1 $ zoom (0.3, 0.75) $ slow 64 $ striate 64 $ sound "8469:1" # gain "1.4" -- # cut "1" 


setcps (84.69/60/4)

p "cpsfun" $ s "bd hh(3,8)" # cps (slow 8 $ 0.5 + saw)

setcps 1
resetCycles
p "g" $ s "bd bd"

d1 $ every 4 ((iter (2 + irand 2)).(fast (1 + (irand 2)))) $ sound "[bd bd bd, aset1 aset1:1 aset1:2]"

d1 $ n "[0 1 2 3 4 5 6 7] [3 2 1]" # sound "supergong"
d1 $ up "0 1 2 3 4 5 6 7 8 9 10 11" # sound "print:1" # cut "1"
d1 $ sound "aset1(11,24,14)" # n (irand 10)
d1 $ sound "aset1([5 3 8 16]/4,[8 32 8 2]/4)"

